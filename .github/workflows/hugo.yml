# Simple multi-version Hugo site deployment to GitHub Pages
name: Deploy Multi-Version Hugo site to Pages

on:
  # Runs on pushes to any version branch
  push:
    branches:
      - main      # Latest/current version
      - v1.0      # Version 1.0
      - v2.0      # Version 2.0
      # Add more version branches as needed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job - only builds the current branch
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.146.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      # Determine current branch and version path
      - name: Determine version info
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "path=." >> $GITHUB_OUTPUT
            echo "base_url=${{ steps.pages.outputs.base_url }}/" >> $GITHUB_OUTPUT
          else
            echo "path=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "base_url=${{ steps.pages.outputs.base_url }}/$BRANCH_NAME/" >> $GITHUB_OUTPUT
          fi
          
          echo "Building branch: $BRANCH_NAME"
          echo "Deploy path: $([ "$BRANCH_NAME" = "main" ] && echo "root" || echo "$BRANCH_NAME")"
      
      # Checkout current branch
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Build current version
      - name: Install Node.js dependencies
        run: npm ci
      - name: Download Hugo modules
        run: hugo mod tidy
      - name: Build current version
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.version.outputs.base_url }}"
      
      # Download existing site (if it exists) to preserve other versions
      - name: Download existing site
        continue-on-error: true
        run: |
          # Create combined public directory
          mkdir -p combined_public
          
          # Try to download existing site to preserve other versions
          echo "Attempting to download existing site..."
          
          # Download main version if we're not building main
          if [ "${{ steps.version.outputs.branch }}" != "main" ]; then
            echo "Downloading main version..."
            wget -r -np -nH -nd -P combined_public/ -A "*.html,*.css,*.js,*.png,*.jpg,*.svg,*.ico,*.json,*.xml" "${{ steps.pages.outputs.base_url }}/" || echo "Main version not found or first deployment"
          fi
          
          # Download other version directories (but skip the one we're currently building)
          for version in v1.0 v2.0; do
            if [ "$version" != "${{ steps.version.outputs.branch }}" ]; then
              echo "Downloading $version..."
              mkdir -p "combined_public/$version"
              wget -r -np -nH -nd -P "combined_public/$version/" -A "*.html,*.css,*.js,*.png,*.jpg,*.svg,*.ico,*.json,*.xml" "${{ steps.pages.outputs.base_url }}/$version/" || echo "$version not found"
            fi
          done
      
      # Copy current build to appropriate location
      - name: Copy current build
        run: |
          if [ "${{ steps.version.outputs.path }}" = "." ]; then
            # Copy to root, but preserve any existing version subdirectories
            cp -r public/* combined_public/
          else
            # Copy to version subdirectory
            mkdir -p "combined_public/${{ steps.version.outputs.path }}"
            cp -r public/* "combined_public/${{ steps.version.outputs.path }}/"
          fi
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./combined_public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 